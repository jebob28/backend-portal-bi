// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package bd_portal_bi

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :exec
INSERT INTO public.bi
(link, id_setor)
VALUES($1, $2)
`

type CreateLinkParams struct {
	Link    pgtype.Text
	IDSetor pgtype.Int4
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) error {
	_, err := q.db.Exec(ctx, createLink, arg.Link, arg.IDSetor)
	return err
}

const createSetor = `-- name: CreateSetor :exec
INSERT INTO public.setor
(setor)
VALUES($1)
`

func (q *Queries) CreateSetor(ctx context.Context, setor string) error {
	_, err := q.db.Exec(ctx, createSetor, setor)
	return err
}

const createUsuarios = `-- name: CreateUsuarios :exec
INSERT INTO public.usuario
(nome, id_setor,email,login,senha,id_permisao)
VALUES($1,$2,$3,$4,$5,$6)
`

type CreateUsuariosParams struct {
	Nome       pgtype.Text
	IDSetor    pgtype.Int4
	Email      pgtype.Text
	Login      pgtype.Text
	Senha      pgtype.Text
	IDPermisao pgtype.Int4
}

func (q *Queries) CreateUsuarios(ctx context.Context, arg CreateUsuariosParams) error {
	_, err := q.db.Exec(ctx, createUsuarios,
		arg.Nome,
		arg.IDSetor,
		arg.Email,
		arg.Login,
		arg.Senha,
		arg.IDPermisao,
	)
	return err
}

const deleteBi = `-- name: DeleteBi :exec
DELETE FROM public.bi
WHERE id=$1
`

func (q *Queries) DeleteBi(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBi, id)
	return err
}

const deleteSetor = `-- name: DeleteSetor :exec
DELETE FROM public.setor
WHERE id=$1
`

func (q *Queries) DeleteSetor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSetor, id)
	return err
}

const deleteUsuario = `-- name: DeleteUsuario :exec
DELETE FROM public.usuario
WHERE id=$1
`

func (q *Queries) DeleteUsuario(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUsuario, id)
	return err
}

const getBi = `-- name: GetBi :one
SELECT id, link, id_setor
FROM public.bi WHERE id_setor=$1
`

func (q *Queries) GetBi(ctx context.Context, idSetor pgtype.Int4) (Bi, error) {
	row := q.db.QueryRow(ctx, getBi, idSetor)
	var i Bi
	err := row.Scan(&i.ID, &i.Link, &i.IDSetor)
	return i, err
}

const getSetor = `-- name: GetSetor :many
SELECT id, setor
FROM public.setor
`

func (q *Queries) GetSetor(ctx context.Context) ([]Setor, error) {
	rows, err := q.db.Query(ctx, getSetor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setor
	for rows.Next() {
		var i Setor
		if err := rows.Scan(&i.ID, &i.Setor); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsuario = `-- name: GetUsuario :many
SELECT id, nome, id_setor,email,login,senha,id_permisao
FROM public.usuario
`

type GetUsuarioRow struct {
	ID         int32
	Nome       pgtype.Text
	IDSetor    pgtype.Int4
	Email      pgtype.Text
	Login      pgtype.Text
	Senha      pgtype.Text
	IDPermisao pgtype.Int4
}

func (q *Queries) GetUsuario(ctx context.Context) ([]GetUsuarioRow, error) {
	rows, err := q.db.Query(ctx, getUsuario)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsuarioRow
	for rows.Next() {
		var i GetUsuarioRow
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.IDSetor,
			&i.Email,
			&i.Login,
			&i.Senha,
			&i.IDPermisao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBi = `-- name: UpdateBi :exec
UPDATE public.bi
SET link=$3, id_setor=$2
WHERE id=$1
`

type UpdateBiParams struct {
	ID      int32
	IDSetor pgtype.Int4
	Link    pgtype.Text
}

func (q *Queries) UpdateBi(ctx context.Context, arg UpdateBiParams) error {
	_, err := q.db.Exec(ctx, updateBi, arg.ID, arg.IDSetor, arg.Link)
	return err
}

const updateSetor = `-- name: UpdateSetor :exec
UPDATE public.setor
SET setor=$2
WHERE id=$1
`

type UpdateSetorParams struct {
	ID    int32
	Setor string
}

func (q *Queries) UpdateSetor(ctx context.Context, arg UpdateSetorParams) error {
	_, err := q.db.Exec(ctx, updateSetor, arg.ID, arg.Setor)
	return err
}

const updateUsuario = `-- name: UpdateUsuario :exec
UPDATE public.usuario
SET nome=$1, id_setor=$2
WHERE id=$3
`

type UpdateUsuarioParams struct {
	Nome    pgtype.Text
	IDSetor pgtype.Int4
	ID      int32
}

func (q *Queries) UpdateUsuario(ctx context.Context, arg UpdateUsuarioParams) error {
	_, err := q.db.Exec(ctx, updateUsuario, arg.Nome, arg.IDSetor, arg.ID)
	return err
}
